apply plugin: 'java'

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.1-SNAPSHOT'
    }
}

dependencies {
    testCompile 'junit:junit:4.10'
}
/*

// make an env variable
ext.env = System.getenv()

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

// parsing build numbers to use in the version
// set build "number" to release if building local
ext.buildNumber = "release"
// drone.io
if (env.DRONE_BUILD_NUMBER)
    ext.buildNumber = env.DRONE_BUILD_NUMBER

// jenkins
else if (env.BUILD_NUMBER)
    ext.buildNumber = env.BUILD_NUMBER

apply plugin: 'forge'

// we want to build on 1.6
targetCompatibility = JavaVersion.VERSION_1_6

version = "${config.minecraft_version}-${config.mod_version}.${buildNumber}"
group = "info.coremodding.moarmor"
archivesBaseName = "MoArmor"

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
}

test {
    ignoreFailures = true
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'

        // replace version and mcversion
        expand 'version': config.mod_version, 'mcversion': config.minecraft_version
    }

    // copy everything else, except the ones we already did
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

// creates a javadoc jar
// don't have any javadocs cause don't need them cause don't have an api
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    from 'build/docs/javadoc'
//    appendix = 'javadoc'
//}

// creates an API jar
// don't have an api yet
//task apiJar(type: Jar) {
//    from(sourceSets.main.java)
//    {
//        include "info/coremodding/realchemics/api/*"
//    }
//    appendix = 'api'
//}

// add the javadoc and api jars
// don't have either yet
//artifacts {
//      archives javadocJar
//      archives apiJar
//}